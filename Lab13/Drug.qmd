---
title: "Class 13: RNASeq analysis with DESeq2"
author: "Nicolò (PID: A18109144)"
format: pdf
---

The data for this hands-on session comes from a published RNA-seq experiment where airway smooth muscle cells were treated with **dexamethasone** (dex), a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014).

# 3. Import countData and colData

```{r}
# Complete the missing code
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

```{r}
head(counts)
head(metadata)
```


> Q1. How many genes are in this dataset? 

```{r}
nrow(counts)
```

> Q2. How many ‘control’ cell lines do we have?

```{r}
sum(metadata$dex == "control")
```

# 4. Toy differential gene expression

Let's start by calculating the mean counts per gene in the "control" samples. We can then compare this value for each gene to the mean counts in the "treated" samples (i.e. columns).

- Step 1. Find wich columns in `counts` correspond to "control" samples.
- Step 2. Calculate the mean value per gene in these columns.
- Step 3. Store my answer for later in `control.mean`

```{r}
control.inds <- metadata[,"dex"] == "control"
control.counts <- counts[ ,control.inds]
control.mean <- rowSums( control.counts )/4
head(control.mean)
```

> Q3. How would you make the above code in either approach more robust? Is there a function that could help here?

I would not hardcode the number of control cell lines and use the `rowMeans()` function instead`.

```{r}
control.inds <- metadata[,"dex"] == "control"
control.counts <- counts[ ,control.inds]
control.mean <- rowMeans(control.counts)
head(control.mean)
```

> Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}
treated.inds <- metadata[,"dex"] == "treated"
treated.counts <- counts[ ,treated.inds]
treated.mean <- rowMeans(treated.counts)
head(treated.mean)
```

TO keep us tidy let's put `control.mean` and `treated.mean` vector together as two columns of a new data.frame.

```{r}
meancounts <- data.frame(control.mean, treated.mean)
```

```{r}
head(meancounts)
```
> Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples.

```{r}
plot(meancounts)
```

> > Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?

```{r}
library(ggplot2)

ggplot(meancounts, aes(control.mean, treated.mean)) +
  geom_point(alpha = 0.2)
```

> Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

```{r}
plot(meancounts, log = "xy")
```

Log transformation are super useful when our data is skewed and measured over a wide range like this. We can use different log transformations like base10 or natural logs but we most often prefer log2 units.

```{r}
# Treated/Control
log2(10/10)
```

What if there was a doubling

```{r}
# Treated/Control
log2(20/10)
```

Half counts

```{r}
log2(10/20)
```

Quadruple

```{r}
log2(40/10)
```

Let's add a log2 fold-change column to our little `meancounts` data.frame:

```{r}
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/
                            meancounts[,"control.mean"])
head(meancounts)
```

There are a couple of “weird” results. Namely, the NaN (“not a number”) and -Inf (negative infinity) results.

The NaN is returned when you divide by zero and try to take the log. The -Inf is returned when you try to take the log of zero. It turns out that there are a lot of genes with zero expression. Let’s filter our data to remove these genes.

```{r}
to.rm.inds <- rowSums(meancounts[,1:2]==0) > 0
mycounts <- meancounts[!to.rm.inds, ]
head(mycounts)
```

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```


> Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

The purpose of arr.ind is to force the `which()` function to include the indices (of row and columns) of meancounts in zero.vals  
We're calling unique() and check the first column to check for duplicates ids and avoid counting the rwos twice 

A common threshold used for calling something differentially expressed is a log2(FoldChange) of greater than 2 or less than -2. Let’s filter the dataset both ways to see how many genes are up or down-regulated.

```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
```

> Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level?

```{r}
sum(up.ind)
```
> Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

```{r}
sum(down.ind)
```
> Q10. Do you trust these results? Why or why not?

No, because we didn't account for statistical significance of these differences...

We will use the DESeq2 package to do this analysis properly

# Using DESeq2

Like any package we must load it up with a `library()` call.

```{r}
library(DESeq2)
```

Set the input object

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts,
                       colData = metadata,
                       design = ~dex)
```

Now we can run our DESeq analysis

```{r}
dds <- DESeq(dds)
```

Get our results back from the `dds` object

```{r}
res <- results(dds)
head(res)
```

# A summary results plot

Volcano plot.
This is a common type of summary figure that keeps both our inner biologist and inner stats nerd happy because it shows both P values and Log2(Fold-Changes).

```{r}
plot(res$log2FoldChange, -log(res$padj), 
      xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")
```

```{r}
plot(res$log2FoldChange, -log(res$padj), 
      xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")
abline(v=2, col = "red")
abline(v=-2, col = "red")
abline(h=-log(0.05), col = "blue")
```

To color the points we will setup a custom color vector indicating transcripts with large fold change and significant differences between conditions:

```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```

Save our results to date...

```{r}
write.csv(res, file="deseq_results.csv")
```

# Adding annotation data

Our result table so far only contains the Ensembl gene IDs. However, alternative gene names and extra annotation are usually required for informative interpretation of our results. In this section we will add this necessary annotation data to our results.

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```

The main function we will use here is called `mapIds()`

Our current IDs are here:

```{r}
#mapIds()
head(row.names(res))
```

These are in ENSEMBLE format. I want "SYMBOL" ids:

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="SYMBOL",     # The new format we want to add
                     multiVals="first")

head(res)
```

> Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.

Let's add GENENAME

```{r}
res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="GENENAME",     # The new format we want to add
                     multiVals="first")

head(res)
```

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="ENTREZID",     # The new format we want to add
                     multiVals="first")

head(res)
```

## Pathway analysis

We weill use the **gage** package along with **pathview** here to do geneset enrichment (a.k.a. pathway analysis) and figure generation respectively.

```{r}
#| message: False
library(pathview)
library(gage)
library(gageData)
```

Let's have a peak at the first two pathways in KEGG

```{r}
data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

What we need for `gage()` is our genes in ENTREZ id format with a measure of their importance.

It wants a vector of e.g. fold-changes.

```{r}
foldchanges <- res$log2FoldChange
head(foldchanges)
```

```{r}
x <- c(100,80,100)
names(x) <- c("desteny", "barry", "chris")
x
```

Add ENTREZ ids as `names()` to my `foldchanges` vector.

```{r}
names(foldchanges) <- res$entrez
head(foldchanges)
```

Now we can run `gage()` with this input vector and the genset we want to examine for overlap/enrichment.

```{r}
# Get the results
keggres <- gage(foldchanges, gsets=kegg.sets.hs)
```

Look at the results

```{r}
attributes(keggres)
```

```{r}
head(keggres$less, 3)
```

We can view these pathways with our geneset genes highlighted using the `pathview()` function. E.g. for Asthma I will use the pathway.id hsa05310 as seen above

```{r}
pathview(gene.data=foldchanges, pathway.id = "hsa05310")
```

![My genes involved in Asthma pathway](hsa05310.pathview.png)
