---
title: "Class05 Data Visualization with ggplot2"
author: "Nicol√≤ (PID: A18109114)"
format: pdf
---

## Using GGPLOT

The ggplot2 package needs to be intalled as it does not with R "out of the box".

We use the `install.packages()` function to do this.

```{r}
head(cars)
```

To use ggplot I need to load it up before I can call any of the functions in the package. I do this with the `library()` function.

```{r}
library(ggplot2)
ggplot()
```

All ggplot figures have at least 3 things:
- data (the stuff we want to plot)
- aesthetic mapping (aes values)
- geoms

```{r}
ggplot(cars) +
  aes(x=speed, y=dist) +
  geom_point()
```

ggplot is not the only graphing system in R there are lots of others. THere is even "base R" graphics.

```{r}
plot(cars)
```

In ggplot we can add a trend line

```{r}
ggplot(cars) +
  aes(x=speed, y=dist) +
  geom_point() +
  geom_smooth()
```

We can also make it straight and remove the SE region

```{r}
ggplot(cars) +
  aes(x=speed, y=dist) +
  geom_point() +
  geom_smooth(method="lm", se=FALSE)
```

And add informative descriptions

```{r}
ggplot(cars) +
  aes(x=speed, y=dist) +
  geom_point() +
  labs(title = "Speed and Stopping Distances of Cars",
       x = "Speed (MPH)",
       y = "Stopping Distance (ft)",
       subtitle = "Speed and Stopping Distances of Cars appear to be positively correlated",
       caption="Dataset: 'cars'") +
  geom_smooth(method="lm", se=FALSE) +
  theme_bw()
```

# Adding more plot aesthetics through aes()

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```

Let's find out the number of rows

```{r}
nrow(genes)
```

What's the number of columns and their names?

```{r}
ncol(genes)
colnames(genes)
```

How many genes are upregulated?

```{r}
table(genes$State)
```

Fraction of the total genes that's upregulated:

```{r}
round( table(genes$State)/nrow(genes) * 100, 2 )
```

Let's plot this data

```{r}
ggplot(genes) + 
  aes(x=Condition1, y=Condition2) +
  geom_point()
```

With color

```{r}
p <- ggplot(genes) + 
    aes(x=Condition1, y=Condition2, col=State) +
    geom_point()
p
```

Other colors

```{r}
p + scale_colour_manual( values=c("blue","gray","red") )
```

And annotation

```{r}
p + scale_colour_manual( values=c("blue","gray","red") ) + labs(title = "Gene Expression Changes Upon Drug Treatment")
```

## Extra credit lab

We get the data

```{r}
# File location online
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
```

And filter just data from 2007

```{r}
library(dplyr)

gapminder_2007 <- gapminder %>% filter(year==2007)
```

Now do a basic plot

```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp) +
  geom_point()
```

Let's make overlapping dots more distinguishable

```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp) +
  geom_point(alpha=0.5)
```

And color!

```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp, color=continent, size=pop) +
  geom_point(alpha=0.5)
```

Or we could just color the dots by population

```{r}
ggplot(gapminder_2007) + 
  aes(x = gdpPercap, y = lifeExp, color = pop) +
  geom_point(alpha=0.8)
```
The dots' size is not to scale, let's fix that

```{r}
ggplot(gapminder_2007) + 
  geom_point(aes(x = gdpPercap, y = lifeExp,
                 size = pop), alpha=0.5) + 
  scale_size_area(max_size = 10)
```

We now do it again for year 1957

```{r}
gapminder_1957 <- gapminder %>% filter(year==1957)

ggplot(gapminder_1957) +
  aes(x=gdpPercap, y=lifeExp, color=continent, size=pop) +
  geom_point(alpha=0.7) +
  scale_size_area(max_size = 15)
```

And compare it to 2007

```{r}
gapminder_1957 <- gapminder %>% filter(year==1957 | year==2007)

ggplot(gapminder_1957) + 
  geom_point(aes(x = gdpPercap, y = lifeExp, color=continent,
                 size = pop), alpha=0.7) + 
  scale_size_area(max_size = 10) +
  facet_wrap(~year)
```

# Bar charts

```{r}
gapminder_top5 <- gapminder %>% 
  filter(year==2007) %>% 
  arrange(desc(pop)) %>% 
  top_n(5, pop)

gapminder_top5
```

We can do a basic bar chart for population

```{r}
ggplot(gapminder_top5) + 
  geom_col(aes(x = country, y = pop))
```

...or for life expectancy

```{r}
ggplot(gapminder_top5) + 
  geom_col(aes(x = country, y = lifeExp))
```

We can also color the bars by continent

```{r}
ggplot(gapminder_top5) + 
  geom_col(aes(x = country, y = pop, fill = continent))
```

...or by life expectancy

```{r}
ggplot(gapminder_top5) + 
  geom_col(aes(x = country, y = pop, fill = lifeExp))
```
...or by gdpPercap

```{r}
ggplot(gapminder_top5) +
  aes(x=country, y=pop, fill=gdpPercap) +
  geom_col()
```

Let's reorder the bars by population (from biggest to lowest)

```{r}
ggplot(gapminder_top5) +
  aes(x=reorder(country, -pop), y=pop, fill=gdpPercap) +
  geom_col()
```

Now we fill by country

```{r}
ggplot(gapminder_top5) +
  aes(x=reorder(country, -pop), y=pop, fill=country) +
  geom_col(col="grey30") +
  guides(fill="none")
```
# Flipping bar charts

Let's visualize arrests in the USA with flipped bar charts

```{r}
head(USArrests)
```

```{r}
USArrests$State <- rownames(USArrests)
ggplot(USArrests) +
  aes(x=reorder(State,Murder), y=Murder) +
  geom_col() +
  coord_flip()
```

We can combine points and lines to make it more easily understandable

```{r}
ggplot(USArrests) +
  aes(x=reorder(State,Murder), y=Murder) +
  geom_point() +
  geom_segment(aes(x=State, 
                   xend=State, 
                   y=0, 
                   yend=Murder), color="blue") +
  coord_flip()
```

# About this document

```{r}
sessionInfo()
```